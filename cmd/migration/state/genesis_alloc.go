package main

import (
	"encoding/json"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/trie/zk"
	"os"
)

func readGenesisAlloc(genesisFilePath string) (genesisAccount map[common.Hash]common.Address, genesisStorage map[common.Hash][]byte) {
	genesisAccount = make(map[common.Hash]common.Address)
	genesisStorage = make(map[common.Hash][]byte)
	var Contracts = map[string]string{
		"L2ToL1MessagePasser":           "0x4200000000000000000000000000000000000016",
		"DeployerWhitelist":             "0x4200000000000000000000000000000000000002",
		"WETH9":                         "0x4200000000000000000000000000000000000006",
		"L2CrossDomainMessenger":        "0x4200000000000000000000000000000000000007",
		"L2StandardBridge":              "0x4200000000000000000000000000000000000010",
		"SequencerFeeVault":             "0x4200000000000000000000000000000000000011",
		"OptimismMintableERC20Factory":  "0x4200000000000000000000000000000000000012",
		"L1BlockNumber":                 "0x4200000000000000000000000000000000000013",
		"GasPriceOracle":                "0x420000000000000000000000000000000000000F",
		"L1Block":                       "0x4200000000000000000000000000000000000015",
		"GovernanceToken":               "0x4200000000000000000000000000000000000042",
		"LegacyMessagePasser":           "0x4200000000000000000000000000000000000003",
		"L2ERC721Bridge":                "0x4200000000000000000000000000000000000014",
		"OptimismMintableERC721Factory": "0x4200000000000000000000000000000000000017",
		"ProxyAdmin":                    "0x4200000000000000000000000000000000000000",
		"BaseFeeVault":                  "0x4200000000000000000000000000000000000019",
		"L1FeeVault":                    "0x420000000000000000000000000000000000001a",
		"SchemaRegistry":                "0x4200000000000000000000000000000000000020",
		"EAS":                           "0x4200000000000000000000000000000000000021",
		"Create2Deployer":               "0x13b0D85CcB8bf860b6b79AF3029fCA081AE9beF2",
		"MultiCall3":                    "0xcA11bde05977b3631167028862bE2a173976CA11",
		"Safe_v130":                     "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
		"SafeL2_v130":                   "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
		"MultiSendCallOnly_v130":        "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
		"SafeSingletonFactory":          "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
		"DeterministicDeploymentProxy":  "0x4e59b44847b379578588920cA78FbF26c0B4956C",
		"MultiSend_v130":                "0x998739BFdAAdde7C933B942a68053933098f9EDa",
		"Permit2":                       "0x000000000022D473030F116dDEE9F6B43aC78BA3",
		"SenderCreator":                 "0x7fc98430eaedbb6070b35b39d798725049088348",
		"EntryPoint":                    "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",
	}

	for _, addr := range Contracts {
		hash := common.BytesToHash(zk.MustNewSecureHash(common.HexToAddress(addr).Bytes()).Bytes())
		genesisAccount[hash] = common.HexToAddress(addr)
	}
	genesis := make(map[string]any)
	must(json.Unmarshal(must1(os.ReadFile(genesisFilePath)), &genesis))
	alloc := genesis["alloc"].(map[string]any)
	for addr, account := range alloc {
		hash := common.BytesToHash(zk.MustNewSecureHash(common.HexToAddress(addr).Bytes()).Bytes())
		genesisAccount[hash] = common.HexToAddress(addr)
		if storage := account.(map[string]any)["storage"]; storage != nil {
			storage := storage.(map[string]any)
			for key, val := range storage {
				genesisStorage[common.HexToHash(key)] = common.HexToHash(val.(string)).Bytes()
			}
		}
	}
	slots := []string{
		"0x0000000000000000000000000000000000000000000000000000000000000001",
		"0x0000000000000000000000000000000000000000000000000000000000000002",
		"0x0000000000000000000000000000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000000000000000000000000000004",
		"0x0000000000000000000000000000000000000000000000000000000000000005",
		"0x0000000000000000000000000000000000000000000000000000000000000000",
		"0x0000000000000000000000000000000000000000000000000000000000000006",
		"0x0000000000000000000000000000000000000000000000000000000000000007",
		"0x0000000000000000000000000000000000000000000000000000000000000001",
		"0x0000000000000000000000000000000000000000000000000000000000000000",
		"0x0000000000000000000000000000000000000000000000000000000000000066",
		"0x0000000000000000000000000000000000000000000000000000000000000067",
		"0x0000000000000000000000000000000000000000000000000000000000000000",
		"0x0000000000000000000000000000000000000000000000000000000000000002",
		"0x0000000000000000000000000000000000000000000000000000000000000000",
		"0x0000000000000000000000000000000000000000000000000000000000000001",
		"0x0000000000000000000000000000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000000000000000000000000000004",
		"0x0000000000000000000000000000000000000000000000000000000000000000",
		"0x0000000000000000000000000000000000000000000000000000000000000001",
		"0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
		"0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf7",
		"0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf8",
		"0x21274e0784154966da0827c4d8ff52398da1ffd72d4fd4ce3bba770ef4f51046",
		"0x5acfd26b00a93d43fa7675595844d651448f11c518e88b56112d82b524be63d1",
		"0xacc99a53bbce4565f990e4e6dc196b13bdfa596d74000f1b419d698c1357e761",
		"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
		"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc",
	}
	for _, slot := range slots {
		hash := common.BytesToHash(zk.MustNewSecureHash(common.HexToHash(slot).Bytes()).Bytes())
		genesisStorage[hash] = common.HexToHash(slot).Bytes()
	}
	return
}
